import { Injectable } from '@angular/core';
import {Http, Headers, Response, URLSearchParams} from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';
@Injectable()
export class AuthService {

  public token: string;

  constructor(private http: Http) {
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    this.token = currentUser && currentUser.token;
  }



  login(username: string, password: string): Observable<boolean> {
    let headers = new Headers();
    headers.append('content-type', 'application/x-www-form-urlencoded');
    let body = new URLSearchParams();
    body.set('username', username);
    body.set('password', password);


    return this.http.post('http://127.0.0.1:8000/api/login_check', body ,{headers : headers} )
      .map((response: Response) => {
        // login successful if there's a jwt token in the response
        const token = response.json() && response.json().token;
        if (token) {
          // set token property
          this.token = token;

          // store username and jwt token in local storage to keep user logged in between page refreshes
          localStorage.setItem('currentUser', JSON.stringify({ username: username, token: token }));

          // return true to indicate successful login
          return true;
        } else {
          // return false to indicate failed login
          return false;
        }
      }).catch(this.handelError);
  }




  logout(): void {
    // clear token remove user from local storage to log user out
    this.token = null;
    localStorage.removeItem('currentUser');
  }

  private handelError(error: Response) {

    return Observable.throw(error.json() || 'server error');

  }




}



// import { Injectable } from '@angular/core';
// import { HttpClient, HttpHeaders, URLSearchParams } from '@angular/common/http';
// // import { Http, Headers, Response, URLSearchParams } from '@angular/http';
// import { Observable, of } from 'rxjs';
// import { map, catchError } from 'rxjs/operators';
// // import 'rxjs/add/operator/map';
// // import 'rxjs/add/operator/catch';
// // import 'rxjs/add/observable/throw';
//
//
//
// @Injectable({
//     providedIn: 'root'
// })
//
// export class AuthService {
//
//     public token: string
//
//     constructor(private http: HttpClient) {
//         const currentUser = JSON.parse(localStorage.getItem('currentUser'));
//         this.token = currentUser.token;
//     }
//
//     login(username: string, password: string): Observable<boolean> {
//         let headers = new HttpHeaders();
//         headers.append('content-type', 'application/json');
//         let body = new URLSearchParams();
//         body.set('login', username);
//         body.set('password', password);
//
//         return this.http.post('http://localhost/api_managerui/web/app_dev.php/api/login', body, {headers: headers})
//             .pipe(
//             map((response: Response) => {
//                 // login successful if there's a jwt token in the response
//                 const token = response.json() && response.json().token;
//                 if (token) {
//                     // set token property
//                     this.token = token;
//
//                     // store username and jwt token in local storage to keep user logged in between page refreshes
//                     localStorage.setItem('currentUser', JSON.stringify({ user: user}));
//
//                     // return true to indicate successful login
//                     return true;
//                 } else {
//                     // return false to indicate failed login
//                     return false;
//                 }
//             }),
//                 catchError(this.handleError<any>('login'))
//             );
//
//     }
//
//
//     /**
//      * Handle Http operation that failed.
//      * Let the app continue.
//      * @param operation - name of the operation that failed
//      * @param result - optional value to return as the observable result
//      */
//     private handleError<T> (operation = 'operation', result?: T) {
//         return (error: any): Observable<T> => {
//
//             // TODO: send the error to remote logging infrastructure
//             console.error(error); // log to console instead
//
//             // TODO: better job of transforming error for user consumption
//             this.log(`${operation} failed: ${error.message}`);
//
//             // Let the app keep running by returning an empty result.
//             return of(result as T);
//         };
//     }
//
//     /** Log a HeroService message with the MessageService */
//     private log(message: string) {
//         console.log(message);
//     }
//
//     logout(): void {
//         // clear token remove user from local storage to log user out
//         this.token = null;
//         localStorage.removeItem('currentUser');
//     }
// }
